name: release

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - build-os: linux
            build-arch: amd64
            build-linker: x86-64
          - build-os: linux
            build-arch: arm64
            build-linker: aarch64
          - build-os: linux
            build-arch: s390x
            build-linker: s390x
          - build-os: linux
            build-arch: ppc64le
            build-linker: powerpc64le
          - build-os: linux
            build-arch: riscv64
            build-linker: riscv64
          - build-os: linux
            build-arch: static
            build-linker: static
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: "1.19.6"
      - name: cache go mod
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.build-os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ matrix.build-os }}-go
      - name: cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            tools/optimizer-server/target/
          key: ${{ matrix.build-os }}-cargo-${{ hashFiles('tools/optimizer-server/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build-os }}-cargo
      - name: install gnu gcc linker
        run: |
          if [ "${{ matrix.build-linker }}" != "static" ]; then
            sudo apt-get install -y gcc-${{ matrix.build-linker }}-linux-gnu
          fi
      - name: build nydus-snapshotter and optimizer
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.51.2
          export PATH=$PATH:$(go env GOPATH)/bin
          if [ "${{ matrix.build-arch }}" == "static" ]; then
            make static-package
          else
            make package GOOS=${{ matrix.build-os }} GOARCH=${{ matrix.build-arch }}
          fi
      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-tars-${{ matrix.build-os }}-${{ matrix.build-arch }}
          path: |
            package/*.tar.gz*
  upload:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: builds
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Nydus Snapshotter ${{ github.ref_name }} Release"
          generate_release_notes: true
          files: |
            builds/release-tars-**/*

  publish-image:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: download artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-tars-linux-static
          path: misc/snapshotter
      - name: unpack static release
        run: |
          cd misc/snapshotter && tar -zxf *.tar.gz && mv bin/* . && rm -rf bin
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: build and push nydus-snapshotter image
        uses: docker/build-push-action@v3
        with:
          context: misc/snapshotter
          file: misc/snapshotter/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: NYDUS_VER=${{ github.ref_name }}
